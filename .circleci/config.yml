# UDACITY CAPSTONE PROJECT - CircleCI File Configuration --
#In this project I applied the skills and knowledge developed throughout the Udacity Cloud DevOps Nanodegree program

version: 2.1

jobs:
  
  #Build and lint code
  build-lint-code:
    docker:
      - image: python:3.9-buster
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  
  docker-container:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependecies
          command: |
            apk update
            apk upgrade
            apk search curl
            apk --no-cache add curl
            apk add --upgrade net-tools-doc
            apk add --no-cache py-pip=9.0.0-r1
      - run:
          name: Build docker image and add a descriptive tag
          command: |
            docker build --build-arg build_number="${CIRCLE_BUILD_NUM}" -t udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} .
      - run:
          name: List docker images
          command: |
            docker image ls
      - run:
          name: run docker image and test it
          #capire se posso usare delle variabili per tag e nome dell'immagine
          #verifiche quando faccio docker run? verifiche sul port fowarding?
          #aggiungere le variabili d'ambiente con password docker e aws cli
          command: |
            docker run -d -p 5000:5000 --name capstone udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5}
            docker run --network udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} appropriate/curl --retry 10 --retry-connrefused http://localhost:5000
#            docker exec capstone curl --retry 10 --retry-connrefused http://localhost:5000
#            netstat -tulpn | grep :5000
#            docker ps
#            curl http://0.0.0.0:5000 > connection_dump.txt
#            cat migration_dump.txt
#            if grep -q "<!DOCTYPE html>" connection_dump.txt
#            then
#              echo "connection establisehd"
#              exit 0
#            else
#              echo "connection refused"
#              exit 1
#            fi
      - run:
          name: push docker
          command: |
            dockerpath=$DOCKERHUB_USERNAME/udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5}
            echo "Docker ID and Image: $dockerpath"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker image tag udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} $dockerpath
            docker push $dockerpath


  docker-container2:
    docker:
      - image: ubuntu-2204:2022.04.2
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: install dependecies
          command: |
            sudo apt-get update
            sudo apt-get install net-tools
            sudo apt-get install \
              ca-certificates \
              curl \
              gnupg \
              lsb-release
            sudo mkdir -p /etc/apt/keyrings 
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install docker-ce docker-ce-cli containerd.io
            systemctl start docker
      - run:
          name: Build docker image and add a descriptive tag
          command: |
            docker build --build-arg build_number="${CIRCLE_BUILD_NUM}" -t udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} .
      - run:
          name: List docker images
          command: |
            docker image ls
      - run:
          name: run docker image and test it
          command: |
            docker run -d -p 5000:5000 --name capstone udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5}
            netstat -tulpn | grep :5000
            docker ps
            curl http://0.0.0.0:5000 > connection_dump.txt
            cat migration_dump.txt
            if grep -q "<!DOCTYPE html>" connection_dump.txt
            then
              echo "connection establisehd"
              exit 0
            else
              echo "connection refused"
              exit 1
            fi
      - run:
          name: push docker
          command: |
            dockerpath=$DOCKERHUB_USERNAME/udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5}
            echo "Docker ID and Image: $dockerpath"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker image tag udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} $dockerpath
            docker push $dockerpath

  
  deploy-network-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      #installing tar - mandatory for creating workspaces in aws-cli image
      - run:
          name: Install dependencies 
          command: yum install -y tar gzip
      #install backend instance    
      - run:
          name: Create Backend infrastructure stack
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file network.yml \
              --tags project=udacity-capstone-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name network-capstone-project \
              --no-fail-on-empty-changeset

#deploy to eks

#image-check:
#    executor: aws-cli/default
#    steps:
#      - checkout
#      - aws-cli/setup
#      - run:
#          name: ecr image check
#          command: |
#            aws ecr describe-images --repository-name udacity-capstone-bcrypt

workflows:
 capstone:
    jobs:
#      - build-lint-code
      - docker-container2
#          requires: [build-lint-code]
#      - deploy-network-infrastructure:
#          requires: [docker-container]