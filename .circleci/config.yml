# UDACITY CAPSTONE PROJECT - CircleCI File Configuration --
#In this project I applied the skills and knowledge developed throughout the Udacity Cloud DevOps Nanodegree program

version: 2.1

orbs:
  kubernetes: circleci/kubernetes@1.3.1
  aws-cli: circleci/aws-cli@3.1.3

#parameters:
  #tipo il nome del cluster

jobs:
  
  #Build and lint code
  build-lint-code:
    docker:
      - image: python:3.9-buster
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint 
  
  docker-container:
    docker:
      - image: docker:17.05.0-ce-git
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install dependecies
          command: |
            apk update
            apk upgrade
            apk search curl
            apk --no-cache add curl
            apk add --upgrade net-tools-doc
            apk add --no-cache py-pip=9.0.0-r1
      - run:
          name: Build docker image and add a descriptive tag
          command: |
            docker build --build-arg build_number="${CIRCLE_BUILD_NUM}" -t udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} .
      - run:
          name: List docker images
          command: |
            docker image ls
      - run:
          name: run docker image and push to docker hub
          command: |
            docker run -d -p 5000:5000 --name capstone udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5}
            docker ps
            dockerpath=$DOCKERHUB_USERNAME/udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5}
            echo "Docker ID and Image: $dockerpath"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker image tag udacity-capstone:ver-${CIRCLE_WORKFLOW_ID:0:5} $dockerpath
            docker push $dockerpath

  # sbagliata la vpc CIDR? di base eksctl usa 192.168.0.0/16
  deploy-network-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      #installing tar - mandatory for creating workspaces in aws-cli image
      - run:
          name: Install dependencies 
          command: yum install -y tar gzip
      #install backend instance    
      - run:
          name: Create Backend infrastructure stack
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file network.yml \
              --tags project=udacity-capstone-${CIRCLE_WORKFLOW_ID:0:5} \
              --stack-name network-capstone-project \
              --no-fail-on-empty-changeset
  
  #se esiste già il cluster? si può saltare questo step?
  create-eks-cluster: 
    docker:
      - image: python:3.9-buster
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: check cluster 
          command: | 
            aws eks list-clusters --region us-east-1 --output text > cluster.txt
            cat cluster.txt
            if grep -q "udacity-capstone-cluster" cluster.txt
            then
              echo "the cluster already exist"
              exit 0
            else
              echo "the cluster doesn't exits"
            fi
      - run:
          name: Install iam authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
      - run:
          name: Install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl --help
      - run:
          name: Install kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
      - run:
          name: Create cluster and worker nodes
          working_directory: ./.circleci/files
          command: |
            eksctl create cluster -f eksctl-cluster.yaml
            kubectl get svc
      - run:
          name: Update kubectl config 
          command: |
            aws eks --region us-east-1 update-kubeconfig --name udacity-capstone-cluster
      - run:
          name: Update kubectl config 
          command: |
            aws eks describe-cluster --name udacity-capstone-cluster

workflows:
 capstone:
    jobs:
#      - build-lint-code
#      - docker-container:
#          requires: [build-lint-code]
#      - deploy-network-infrastructure:
#          requires: [docker-container]
      - create-eks-cluster 
#          requires: [build-lint-code, docker-container, deploy-network-infrastructure]
#      - deploy-to-eks:
#          requires: [build-lint-code, docker-container, deploy-network-infrastructure, create-eks-cluster]
#      - smoke-test:
#          requires: [build-lint-code, docker-container, deploy-network-infrastructure, create-eks-cluster, smoke-test]
